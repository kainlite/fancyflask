# I could have used a template tool like helmfile on top to use a dynamic value, or
# have multiple environments easily, note that these settings are for a dev environment
# where losing data is not an issue.

## This could be in another file, for simplicity is here
redis:
  cluster:
    enabled: false
    slaveCount: 0
  sentinel:
    enabled: false
  existingSecret: fancyflask-redis
  existingSecretPasswordKey: redis_password

replicaCount: 1

image:
  repository: kainlite/fancyflask
  # This is set to all merges to master are used
  # it can be very problematic in real environments
  # to track changes, move forward or backwards, etc.
  tag: latest
  pullPolicy: Always

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: fancyflask.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
